/********************************/
/* Mixin Formatting             */
/********************************/
// Mixins are functions that we can pass values into

// Breakpoints and Media Query map
// Reminder of Min-Width ======= If [device width] is greater than or equal to 600px, then do {...}"
//
$breakpoints1: ( 'xsmall' : ( min-width: 480px ), 'small' : ( min-width: 768px ), 'medium' : ( min-width: 992px ), 'large' : ( min-width: 1200px ), 'xlarge' : ( min-width: 1700px ) );

@mixin respond-to($name) {
    // If the key exists in the map
    @if map-has-key($breakpoints1, $name) {
        // Prints a media query based on the value
        @media #{inspect(map-get($breakpoints1, $name))} {
            @content;
        }
    }
    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$name}`. " + "Please make sure it is defined in `$breakpoints` map.";
    }
}

// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------
// Flexbox display
@mixin flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
    -webkit-box-flex: $values;
    -moz-box-flex: $values;
    -webkit-flex: $values;
    -ms-flex: $values;
    flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
    -webkit-flex-direction: $direction;
    -moz-flex-direction: $direction;
    -ms-flex-direction: $direction;
    flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
    -webkit-flex-wrap: $wrap;
    -moz-flex-wrap: $wrap;
    -ms-flex-wrap: $wrap;
    flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
    -webkit-flex-flow: $flow;
    -moz-flex-flow: $flow;
    -ms-flex-flow: $flow;
    flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
    -webkit-box-ordinal-group: $val;
    -moz-box-ordinal-group: $val;
    -ms-flex-order: $val;
    -webkit-order: $val;
    order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
    -webkit-flex-grow: $grow;
    -moz-flex-grow: $grow;
    -ms-flex-grow: $grow;
    flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink) {
    -webkit-flex-shrink: $shrink;
    -moz-flex-shrink: $shrink;
    -ms-flex-shrink: $shrink;
    flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
    -webkit-flex-basis: $width;
    -moz-flex-basis: $width;
    -ms-flex-basis: $width;
    flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
    -webkit-justify-content: $justify;
    -moz-justify-content: $justify;
    -ms-justify-content: $justify;
    justify-content: $justify;
    -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
    -webkit-align-content: $align;
    -moz-align-content: $align;
    -ms-align-content: $align;
    align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
    -webkit-align-items: $align;
    -moz-align-items: $align;
    -ms-align-items: $align;
    align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
    -webkit-align-self: $align;
    -moz-align-self: $align;
    -ms-align-self: $align;
    align-self: $align;
}

/* @include transition(all,2s,ease-out); */
@mixin transition($what: all, $time: 0.2s, $how: ease-in-out) {
    -webkit-transition: $what $time $how;
    -moz-transition: $what $time $how;
    -ms-transition: $what $time $how;
    -o-transition: $what $time $how;
    transition: $what $time $how;
}

@mixin inline-block() {
    display: -moz-inline-stack;
    display: inline-block;
    zoom: 1;
    *display: inline;
}

@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    border-radius: $radius;
}

@mixin brand-button($padding, $color, $main-bg-color, $box-shadow-color) {
    background-color: $main-bg-color;
    color: $color;
    border: none;
    padding: $padding;
    margin: 5px;
    display: inline-block;
    text-align: center;
    cursor: pointer;
    font-weight: $bold;
    letter-spacing: 1px;
    text-transform: uppercase;
    border-radius: 0;
    @include transition(all, 0.8s, ease);

    &:hover {
        box-shadow: inset 0 100px 0 0 $box-shadow-color;
    }

    @include mappy-bp(xsmall) {
        font-size: $brand-font-size * 0.5;
    }

    @include mappy-bp(small) {
        font-size: $brand-font-size * 0.6;
    }

    @include mappy-bp(medium) {
        font-size: $brand-font-size * 0.7;
    }

    @include mappy-bp(large) {
        font-size: $brand-font-size * 0.8;
    }

    @include mappy-bp(xlarge) {
        font-size: $brand-font-size * 0.8;
    }
}

/*******************************************************/
/* Hover Sliding Underline Formatting -Left to Right   */
/*******************************************************/
@mixin sliding-u-l-r($width, $color) {
    display: inline-block;

    &:after {
        content: '';
        display: block;
        height: 3px;
        width: 0;
        background: transparent;
        transition: width .5s ease, background-color .5s ease;
    }

    &:hover:after {
        width: $width;
        background: $color;
    }
}

.-slide-white-50 {
    @include sliding-u-l-r(50%, $brand-white);
}

.-slide-berry-50 {
    @include sliding-u-l-r(50%, $brand-accent-color1);
}

/*******************************************************/
/* Hover Sliding Underline Formatting - Middle Out     */
/*******************************************************/
@mixin sliding-middle-out($color) {
    display: inline-block;
    position: relative;
    padding-bottom: 3px;

    &:after {
        content: '';
        display: block;
        margin: auto;
        height: 3px;
        width: 0px;
        background: transparent;
        transition: width .5s ease, background-color .5s ease;
    }

    &:hover:after {
        width: 100%;
        background: $color;
    }
}

.-slide-middle-out-white {
    @include sliding-middle-out($brand-white);
}

.-slide-middle-out-berry {
    @include sliding-middle-out($brand-accent-color1);
}


/*****************************************/
/* Underline Middle of Word Formatting   */
/*****************************************/
@mixin underline-middle() {
    display: inline-block;
    padding-bottom: 1px;
    position: relative;

    &:before {
        content: "";
        position: absolute;
        width: 10%;
        height: 1px;
        top: 5px;
        left: 45%;
        border-top: 3px solid $brand-secondary;
    }
}

@mixin icomoon() {
    font-family: 'icomoon';
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;
    /* Better Font Rendering =========== */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

/********************/
/* Transform Mixins */
/********************/

// Browser Prefixes
@mixin transform($transforms) {
    -webkit-transform: $transforms;
    -moz-transform: $transforms;
    -ms-transform: $transforms;
    transform: $transforms;
}

// Rotate
@mixin rotate ($deg) {
    @include transform(rotate(#{$deg}deg));
}

// Scale
@mixin scale($scale) {
    @include transform(scale($scale));
}

// Translate
@mixin translate ($x, $y) {
    @include transform(translate($x, $y));
}

// Skew
@mixin skew ($x, $y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
}

// Transform Origin
@mixin transform-origin ($origin) {
    -webkit-transform-origin: $origin;
    -moz-transform-origin: $origin;
    -ms-transform-origin: $origin;
    transform-origin: $origin;
}

@mixin grad($direction, $gradients...) {
    background: $brand-body-bg2; /* For browsers that do not support gradients */
    background: -webkit-linear-gradient($direction, $gradients); /* For Safari 5.1 to 6.0 */
    background: -o-linear-gradient($direction, $gradients); /* For Opera 11.1 to 12.0 */
    background: -moz-linear-gradient($direction, $gradients); /* For Firefox 3.6 to 15 */
    background-image: linear-gradient($direction, $gradients); /* Standard syntax */
}

.-grad {
    @include grad(90deg, $brand-body-bg1, $brand-body-bg2);
}

// mixin
@mixin angle($pseudo, $flip: false, $angle: 9deg) {
    // Possible values for $pseudo are: before, after, both
    @if $pseudo == 'before' or $pseudo == 'after' or $pseudo == 'both' {
        position: relative;
        z-index: 1;
        $selector: if($pseudo == 'both', '&:before,&:after', '&:#{$pseudo}');

        #{$selector} {
            background: inherit;
            content: '';
            display: block;
            height: 50%;
            left: 0;
            position: absolute;
            right: 0;
            z-index: -1;
            -webkit-backface-visibility: hidden; // for Chrome Windows
        }

        @if $pseudo == 'before' {
            #{$selector} {
                top: 0;

                @if $flip {
                    transform: skewY($angle * -1);
                    transform-origin: 0 0;
                }
                @else {
                    transform: skewY($angle);
                    transform-origin: 100% 0;
                }
            }
        }

        @if $pseudo == 'after' {
            #{$selector} {
                bottom: 0;

                @if $flip {
                    transform: skewY($angle);
                    transform-origin: 0 100%;
                }
                @else {
                    transform: skewY($angle * -1);
                    transform-origin: 100%;
                }
            }
        }

        @if $pseudo == 'both' {
            &:before {
                top: 0;

                @if $flip {
                    transform: skewY($angle * -1);
                    transform-origin: 0 0;
                }
                @else {
                    transform: skewY($angle);
                    transform-origin: 100% 0;
                }
            }

            &:after {
                bottom: 0;

                @if $flip {
                    transform: skewY($angle);
                    transform-origin: 0 0;
                }
                @else {
                    transform: skewY($angle * -1);
                    transform-origin: 100%;
                }
            }
        }
    }
}

// slanted edges here
.edge--bottom {
    @include angle(after);
}

.edge--bottom--reverse {
    @include angle(after, true);
}

.edge--top {
    @include angle(before);
}

.edge--top--reverse {
    @include angle(before, true);
}

.edge--both {
    @include angle(both);
}

.edge--both--reverse {
    @include angle(both, true);
}

.-berry {
    background: #b52b4a;
}

.-blue {
    background: #41ade5;
}

.-orange {
    background: #de6628;
}

.-green {
    background: #5e9b42;
}

// demo code below
.block {
    color: #fff;
    font-family: 'Fira Sans', sans-serif;
    margin: 0 0 200px;
    padding: 20% 20px;
    text-align: center;
}

h1 {
    font-size: 32px;
    font-weight: 500;
}

p {
    font-size: 14px;
    font-weight: 300;
    margin-top: 0.5em;
}
